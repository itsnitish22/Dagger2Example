my POV, don't judge if anyone reads this or finds some mistake

we tell two things to dagger:
1. how to create an object
2. places where we're going to consume the object

For Understanding:

                             ----> Constructors
    Consumer ----> Component
                             ----> Modules

1. @Inject where ever we need the objects
    types: 1. constructor
           2. field

2. @Component graph kind of thing, which knows how to create the objects
   ways to create: 1. directly by calling constructor
                   2. by creating modules (eg. builder pattern (room db, retrofit), abstract class, interface)

3. @Modules produces which will create the objects, that are not possible by constructor calls (abstract or interface classes)
   uses: 1. @Provides if cannot create the object using constructor
         2. @Binds if can create objects using the constructor

   note: Modules can have bind and provides together, bind will be abstract and provides can be non static
         both non static and abstract can't be together